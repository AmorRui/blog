/*
Navicat MySQL Data Transfer

Source Server         : 127.0.0.1
Source Server Version : 50637
Source Host           : localhost:3306
Source Database       : blog

Target Server Type    : MYSQL
Target Server Version : 50637
File Encoding         : 65001

Date: 2018-03-02 01:37:51
*/

SET FOREIGN_KEY_CHECKS=0;

-- ----------------------------
-- Table structure for `article`
-- ----------------------------
DROP TABLE IF EXISTS `article`;
CREATE TABLE `article` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `title` varchar(255) NOT NULL,
  `jianjie` varchar(255) NOT NULL,
  `content` text NOT NULL,
  `img` char(255) DEFAULT NULL,
  `year` int(255) NOT NULL,
  `mounth` int(255) NOT NULL,
  `day` int(255) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=163 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of article
-- ----------------------------
INSERT INTO `article` VALUES ('155', '对connect使用总结', 'live like youself. 用于react+redux开发', '<p>&nbsp;</p>\n\n<blockquote>\n<p>live like youself.</p>\n</blockquote>\n\n<p>在react+redux项目中有一个至关重要的API，它就是：connect(mapStateProps, mapDispatchToProps, mergeProps, options) 今天让我们来看一下我们如何使用此API，建议有一定的react+redux开发经验，但不是很明白connect的使用原理的开发者观看此文章</p>\n\n<h2>mapStateProps(state, [ownProps]):</h2>\n\n<p>此函数将会监听store的变化，一旦发生变化，就会执行此函数，此回调函数，必须返回的是一个纯对象，此对象会与此组件的props合并，第一个参数state是当前store的状态，ownProps则指的是当前组件的props,当组件props属性被更新，此函数也会被调用</p>\n\n<h2>mapDispatchToProps(dispatch, [ownProps])</h2>\n\n<p>dispatch:redux里的dispatch函数</p>\n\n<p>ownProps:此参数为object or function:</p>\n\n<ol>\n	<li>如果传递的是一个对象，那么该对象每个定义在该对象的函数，都被当作action creator，而且这个对象与Redux store绑定在一起，其中定义的方法名都作为属性名，合并到props中。</li>\n	<li>如果是一个函数，则会接收一个dispatch函数，然后由你来决定返回什么对偶像，这个对象要通过dispatch与action creator连接起来，这样，当我们调用这个对象里的action creactor（相当于使用了redux-thunk后，直接在dispatch中传入action creactor的效果），就可以直接执行了，我们一般通过binActionCreators来将两者链接起来</li>\n	<li>如果你省略这个 mapDispatchToProps 参数，默认情况下，dispatch会注入到你的组件 props 中。</li>\n	<li>如果指定了该回调函数中第二个参数 ownProps，该参数的值为传递到组件的 props，而且只要组件接收到新 props，mapDispatchToProps 也会被调用。</li>\n</ol>\n\n<h2>[mergeProps(stateProps, dispatchProps, ownProps): props]:</h2>\n\n<p>一般我们可能不会使用mergeProps，官方详细解释如下： [mergeProps(stateProps, dispatchProps, ownProps): props] (Function): 如果指定了这个参数，mapStateToProps() 与 mapDispatchToProps() 的执行结果和组件自身的 props 将传入到这个回调函数中。该回调函数返回的对象将作为 props 传递到被包装的组件中。你也许可以用这个回调函数，根据组件的 props 来筛选部分的 state 数据，或者把 props 中的某个特定变量与 action creator 绑定在一起。如果你省略这个参数，默认情况下返回 Object.assign({}, ownProps, stateProps,dispatchProps) 的结果。</p>\n\n<h2>[options]: 此参数更加不常用，官方API如下：</h2>\n\n<p>[options] (Object) 如果指定这个参数，可以定制 connector 的行为。</p>\n\n<ul>\n	<li>[pure = true] (Boolean): 如果为 true，connector 将执行 shouldComponentUpdate 并且浅对比 mergeProps 的结果，避免不必要的更新，前提是当前组件是一个&ldquo;纯&rdquo;组件，它不依赖于任何的输入或 state 而只依赖于 props 和 Redux store 的 state。默认值为 true。</li>\n	<li>[withRef = false] (Boolean): 如果为 true，connector 会保存一个对被包装组件实例的引用，该引用通过 getWrappedInstance() 方法获得。默认值为 false。</li>\n</ul>\n', '/uploads\\avatar-1519655827570.jpg', '2016', '5', '26');
INSERT INTO `article` VALUES ('158', 'HTML   总结', 'live like youself. 1>标签 2>路径 3> 标签 4> 列表 5> 表单  6>API', '<p>&nbsp;</p>\n\n<blockquote>\n<p>live like youself.</p>\n</blockquote>\n\n<p>一.HTML标签<br />\n&nbsp; &nbsp;1.三个双标签<br />\n&nbsp; &nbsp; &nbsp;a)标题标签 &nbsp;h1-h6<br />\n&nbsp; &nbsp; &nbsp; &nbsp; h1只能使用一次,多次使用不利于SEO优化<br />\n&nbsp; &nbsp; &nbsp; &nbsp; 上下自动生成空白行<br />\n&nbsp; &nbsp; &nbsp;b)段落标签 &nbsp;p<br />\n&nbsp; &nbsp; &nbsp; &nbsp; 上下自动生成空白行<br />\n&nbsp; &nbsp; &nbsp;c)文本标签 &nbsp;font--&gt;基本不使用<br />\n&nbsp; &nbsp;2.三个单标签<br />\n&nbsp; &nbsp; &nbsp;a)&lt;!-- 注释 &nbsp;--&gt;<br />\n&nbsp; &nbsp; &nbsp;b)换行 &lt;br/&gt;<br />\n&nbsp; &nbsp; &nbsp;c)分隔行 &lt;hr/&gt;<br />\n&nbsp; &nbsp;3.文本格式化标签<br />\n&nbsp; &nbsp; strong &nbsp;加粗 &nbsp;b<br />\n&nbsp; &nbsp; del &nbsp; &nbsp;删除线 s<br />\n&nbsp; &nbsp; ins &nbsp; &nbsp;下划线 u<br />\n&nbsp; &nbsp; em &nbsp; &nbsp; 倾斜 &nbsp; i<br />\n&nbsp; &nbsp; sup &nbsp; &nbsp;上标<br />\n&nbsp; &nbsp; sub &nbsp; &nbsp;下标<br />\n二.HTML路径</p>\n\n<p>1. 相对路径</p>\n\n<p>&nbsp; &nbsp;```<br />\n&nbsp; &nbsp; a)同级--直接书写文件名称<br />\n&nbsp; &nbsp; b)下一级--文件夹/文件名称<br />\n&nbsp; &nbsp; c)上一级--../文件名称<br />\n&nbsp; &nbsp;```</p>\n\n<p>&nbsp; &nbsp;2.绝对路径--&gt;基本不使用</p>\n\n<p>&nbsp; &nbsp;```<br />\n&nbsp; &nbsp;a)跟目录<br />\n&nbsp; &nbsp;b)网络<br />\n&nbsp; &nbsp;```</p>\n\n<p>&nbsp; &nbsp;?</p>\n\n<p>三.超链接标签<br />\n&nbsp; &nbsp; 1.a href 跳转到页面(文件)<br />\n&nbsp; &nbsp; 2.alt=&quot;错误时提示文本&quot;<br />\n&nbsp; &nbsp; &nbsp; title=&quot;鼠标移动到图片上提示文本&quot;<br />\n&nbsp; &nbsp; &nbsp; target(打开方式)<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; a)_self &nbsp;默认值--在本窗口打开<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; b)_blank &nbsp;在新窗口打开<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; c)优化--在head标签上书写<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&lt;base target=&quot;_blank&quot;&gt;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;决定所有页面的打开方式<br />\n&nbsp; &nbsp; 3.锚点<br />\n&nbsp; &nbsp; &nbsp; &nbsp; a)设置锚点 &nbsp;文本内容中 &nbsp;ID=&quot;锚点的ID&quot;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; b)链接到锚点 &nbsp; &lt;a href= &quot;#锚点的ID&quot;&gt;文字&lt;/a&gt;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 本页面的直接链接<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&lt;a href= &quot;url#锚点的ID&quot;&gt;文字&lt;/a&gt;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 链接到其他的页面<br />\n&nbsp; &nbsp; 3.空链 &nbsp; &nbsp; &lt;a href= &quot;#&quot;&gt;文字&lt;/a&gt;<br />\n&nbsp; &nbsp; 4.压缩包 &nbsp; &lt;a href= &quot;压缩包&quot;&gt;文字&lt;/a&gt;<br />\n&nbsp; &nbsp; 5.图片 &nbsp; &nbsp; &lt;img src=&quot;路径&quot; alt=&quot;错误时提示文本&quot; title=&quot;鼠标移动到图片上提示文本&quot; width=&quot;图片的宽&quot; height=&quot;图片的高&quot;/&gt;<br />\n四.列表--用来装载数据的容器</p>\n\n<p>1.列表</p>\n\n<p>&nbsp; &nbsp; a)无序列表 ul&gt;li &nbsp; list-style:none;--清除小点点<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; type:disc 小实点 &nbsp; square 小方块 &nbsp;cride 小圆点<br />\n&nbsp; &nbsp; b)有序列表 ol&gt;li<br />\n&nbsp; &nbsp; c)自定义列表 dl&gt;dt{只能包含行内元素}+dd*n<br />\n2.表格</p>\n\n<p>&nbsp; &nbsp; 1 基本属性<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;a)width/heigh<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;b)border<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;c)sellspacing=&quot;0&quot;单元格与单元格之间距离<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; sellspadding=&quot;0&quot;内容据边框之间距离<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;d)bacolor 背景颜色<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;e)align: left|right|center 对齐方式<br />\n&nbsp; &nbsp; &nbsp; &nbsp; 用在table上,决定tr/td上,决定里面内容的对齐方式<br />\n3 单元格</p>\n\n<p>&nbsp; &nbsp; &nbsp; &nbsp; a)标准结构<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;table&gt;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;caption&gt;标题&lt;caption/&gt;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;thead&gt;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;tr&gt;&lt;/tr&gt;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;td&gt;&lt;/td&gt;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&lt;/thead&gt;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;tbody&gt;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&lt;tr&gt;&lt;/tr&gt;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&lt;td&gt;&lt;/td&gt;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;/tbody&gt;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;tfoot&gt;---一般使用<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&lt;tr&gt;&lt;/tr&gt;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&lt;td&gt;&lt;/td&gt;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;/tfoot&gt;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;/table&gt;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; b)表头,标题,单元格合并<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; caption--表格标题<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; cotspan=&quot;2&quot;--水平方向单元格合并<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; rowspan=&quot;2&quot;--垂直方向单元格合并<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; th--特殊单元格--表头的意思--文字居中加粗</p>\n\n<p>&nbsp;4表单</p>\n\n<p>a)表单</p>\n\n<p>```<br />\n&nbsp; &nbsp; &nbsp;&nbsp;&nbsp; &nbsp;1 用来收集信息&nbsp;<br />\n&nbsp; &nbsp; &nbsp;&nbsp; &nbsp;2 提示信息&nbsp;<br />\n&nbsp; &nbsp; &nbsp;&nbsp; &nbsp;3 表单控件&nbsp;<br />\n&nbsp; &nbsp; &nbsp;&nbsp; &nbsp;4 表单域<br />\n```</p>\n\n<p>b)表单控件</p>\n\n<p>1.表单</p>\n\n<p>```<br />\n&nbsp;&lt;form action=&quot;收集信息交给谁处理&quot; method=&quot;post(比较安全)|get&quot;&gt;<br />\n```</p>\n\n<p>?&nbsp;&nbsp; &nbsp;单行文本输入框</p>\n\n<p>```<br />\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&lt;label for=&quot;user&quot;&gt;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;用户名:<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&lt;/label&gt;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&lt;input id=&quot;user&quot;&nbsp;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;type=&quot;text&quot;&nbsp;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;name=&quot;user&quot;&nbsp;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;value=&quot;默认值&quot;&nbsp;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;placeholder=&quot;期望用户输入的值&quot;&nbsp;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;maxlength=&quot;6&quot; &nbsp;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;required&nbsp;&nbsp; &nbsp;&nbsp;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;accesskey=&quot;g&quot;&nbsp;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;autocomplete=&quot;on&quot;&gt;<br />\n```</p>\n\n<p>密码输入框</p>\n\n<p>```<br />\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&lt;label for=&quot;aa&quot;&gt;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;密码:<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;/label&gt;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;input type=&quot;password&quot;&nbsp;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; id=&quot;aa&quot;&nbsp;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; name=&quot;pwd&quot;&nbsp;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; maxlength=&quot;6&quot;&gt;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<br />\n```</p>\n\n<p>单选框</p>\n\n<p>```<br />\n&nbsp;性别:<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&lt;input type=&quot;radio&quot; &nbsp;name=&quot;gender&quot; &gt; 男&nbsp;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&lt;input type=&quot;radio&quot; &nbsp;name=&quot;gender&quot; checked=&quot;checked&quot;&gt;女<br />\n```</p>\n\n<p>多选框</p>\n\n<p>```<br />\n特长:&nbsp;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&lt;input type=&quot;checkbox&quot; checked=&quot;checked&quot;&gt; 数钱&nbsp;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&lt;input type=&quot;checkbox&quot; checked=&quot;checked&quot;&gt; 逛吃<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&lt;input type=&quot;checkbox&quot;&gt; 撒娇<br />\n```</p>\n\n<p>下拉列表</p>\n\n<p>```<br />\n国家: &lt;select&gt;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;option&gt;中国&lt;/option&gt;<br />\n&nbsp; &nbsp; 下拉列表选项<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;option&gt;棒子&lt;/option&gt;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;option&gt;小日本&lt;/option&gt;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;option selected=&quot;selected&quot;&gt;阿三&lt;/option&gt;<br />\n&nbsp;&nbsp; &nbsp; &nbsp; &lt;/select&gt;<br />\n下拉列表多选效果<br />\n&nbsp;&nbsp; &nbsp; &nbsp;&nbsp;<br />\n&nbsp;&nbsp; &nbsp; &nbsp; &lt;select multiple=&quot;multiple&quot;&gt;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;option&gt;张三&lt;/option&gt;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;option&gt;李四&lt;/option&gt;<br />\n&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &lt;/select&gt;<br />\n下拉列表分组效果<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;select&gt;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;optgroup label=&quot;北京市&quot;&gt;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;option&gt;朝阳区&lt;/option&gt;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;/optgroup&gt;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;optgroup label=&quot;沈阳市&quot;&gt;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;option&gt;朝阳区&lt;/option&gt;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;option&gt;和平区&lt;/option&gt;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;/optgroup&gt;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&lt;/select&gt;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />\n带下拉列表的输入框 &nbsp;<br />\n&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<br />\n&nbsp;&nbsp; &nbsp;您喜欢的类型:<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&lt;input type=&quot;text&quot; list=&quot;love&quot;&gt;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&lt;datalist id=&quot;love&quot;&gt;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;option&gt;阳光&lt;/option&gt;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&lt;/datalist&gt;<br />\n```</p>\n\n<p>其他常用</p>\n\n<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;--&gt; &nbsp;文本域 &nbsp;个人简介:&lt;textarea &nbsp;cols=&quot;50&quot; rows=&quot;10&quot;&gt;&lt;/textarea&gt;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;--&gt; &nbsp;文件上传控件 &lt;input type=&quot;file&quot; multiple=&quot;multiple&quot;&gt;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;--&gt; &nbsp;隐藏域:&lt;input type=&quot;hidden&quot;&gt;<br />\n&nbsp; &nbsp; &nbsp; &nbsp;h5控件<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;--&gt; &nbsp;邮箱： &lt;input type=&quot;email&quot;&gt;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;--&gt; &nbsp;网址:&lt;input type=&quot;url&quot;&gt;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;--&gt; &nbsp;搜索: &lt;input type=&quot;search&quot;&gt;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;--&gt; &nbsp;数字: &lt;input type=&quot;number&quot; min=&quot;5&quot; max=&quot;30&quot; step=&quot;3&quot;&gt;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;--&gt; &nbsp;数字范围控件 &nbsp; 范围: &lt;input type=&quot;range&quot; min=&quot;5&quot; max=&quot;30&quot; step=&quot;3&quot;&gt;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;--&gt; &nbsp;周控件:&lt;input type=&quot;week&quot;&gt;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;--&gt; &nbsp;月控件: &lt;input type=&quot;month&quot;&gt;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;--&gt; &nbsp;日控件: &lt;input type=&quot;date&quot;&gt;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;--&gt; &nbsp;时间：&lt;input type=&quot;time&quot;&gt;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;--&gt; &nbsp;提交按钮&lt;input type=&quot;submit&quot; value=&quot;注册&quot;&gt;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;--&gt; 普通按钮&lt;input type=&quot;button&quot; value=&quot;不能提交&quot;&gt;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;--&gt; button按钮&lt;button&gt;button按钮&lt;/button&gt;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;--&gt; 图片按钮&lt;input type=&quot;image&quot; src=&quot;im.jpg&quot;&gt;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;--&gt; 重置按钮&lt;input type=&quot;reset&quot; &gt;</p>\n\n<p><br />\n五.标签语义化<br />\n&nbsp; &nbsp; &nbsp; &nbsp; 1.根据内容结构化,选择合适的标签(内容语义化--代码语义化)<br />\n&nbsp; &nbsp; &nbsp; &nbsp; 2.意义&nbsp;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp;a)网页结构合理&nbsp;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp;b)利于SEO和搜索引擎建立良好的沟通,有了良好的结构和语义,更容易被网页搜索<br />\n&nbsp; &nbsp; &nbsp; &nbsp; 3.注意&nbsp;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp;a)尽可能的少用div,span<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; b)语义不明显,既可以使用div/p标签时,尽可能的使用p标签(p标签有上下间距,对兼容特殊端有利)<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; c)不能使用纯样式的标签 b.u.font.等<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; d)需要使用强调文本标签 strong等<br />\n&nbsp; &nbsp; &nbsp; &nbsp; 4.语义化标签在IE9以下不支持--解决办法<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;1)用div代替--&gt;失去了语义化的意义<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;2)使用插件<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;a&gt;html5shiv.js &nbsp;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;b&gt;在头部引入,提前解析html标签<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;c&gt;有些版本不需要这个文件(本来就是支持的),通过&nbsp;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; **条件注释** lt 小于 gt 大于 lte 小于等于 gte 大于等于 &nbsp;&nbsp;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 来判断<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;[if lte IE 8]&gt;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;h1&gt;您的版本浏览器过低，请您升级&lt;/h1&gt;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;![endif]</p>\n\n<p>? &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</p>\n\n<p>六.API</p>\n\n<p>1.操作类的方法</p>\n\n<p>```<br />\nclassList &nbsp; 类的集合<br />\nclassList.add(); &nbsp; &nbsp;添加<br />\nclassList.remove(); 删除<br />\nclassList.toggle(); 交换<br />\nclassList.contains(); 检查优购有,返回布尔值&nbsp;<br />\n```</p>\n\n<p>2.自定义属性</p>\n\n<p>```<br />\n&nbsp;&nbsp; &nbsp;1&gt;之前的理解是==&gt;自己定义的不是元素本身的理解为自定义属性</p>\n\n<p>&nbsp;&nbsp; &nbsp;2&gt;H5中对自定义属性有新约定,必须以 &nbsp; &nbsp; dara- &nbsp; &nbsp;开始的是自定义属性,操作指定属性.自定义属性的名称是去掉 &nbsp; &nbsp;data- &nbsp; 遵循驼峰命名法</p>\n\n<p>&nbsp;&nbsp; &nbsp;3&gt;名字中有大写的地方会解析为小写<br />\n&nbsp;&nbsp; &nbsp;4&gt;会更改DOM元素<br />\n```</p>\n\n<p>```<br />\n/*获取*/<br />\n&nbsp; &nbsp; console.log($(&#39;.box&#39;).data(&#39;name&#39;));<br />\n&nbsp; &nbsp; console.log($(&#39;.box&#39;).data(&#39;userName&#39;));<br />\n&nbsp; &nbsp; console.log($(&#39;.box&#39;).data(&#39;username&#39;));<br />\n&nbsp;/*修改 添加 &nbsp; 在内存操作*/<br />\n&nbsp; &nbsp; $(&#39;.box&#39;).data(&#39;name&#39;,&#39;ggg&#39;);</p>\n\n<p>&nbsp; &nbsp; console.log($(&#39;.box&#39;).data(&#39;name&#39;));<br />\n```</p>\n', '/uploads\\avatar-1519657170026.jpg', '2014', '5', '1');
INSERT INTO `article` VALUES ('159', 'CSS   总结', 'live like youself. CSS层叠样式表--用来给页面化妆的,用来装饰页面的', '<p>一.书写位置</p>\n\n<pre>\n  \n  1.外链式 &lt;link rel=&quot;stylesheet&quot; href=&quot;路径&quot;/&gt;\n  2.内嵌式 head标签下书写style\n  3.行内样式 直接在标签内部书写\n  4.特点 a)外链式--真正实现表现和结构分离,便于页面维护\n   &nbsp; &nbsp;  b)内嵌式--没有实现表现和结构分离\n   &nbsp; &nbsp;  c)行内样式--结构和表现混为一谈,不推荐使用</pre>\n\n<p>二.常用属性</p>\n\n<p>1.width/heigh 宽高</p>\n\n<pre>\n  \n  a)line-height:10px &nbsp; 行高 基线与基线之间的距离\n   &nbsp;  行高 = 文字高度  =  文字居中\n   &nbsp;  行高 &lt; 文字高度  =  文字垂直偏上\n   &nbsp;  行高 &gt; 文字高度  =  文字窗子偏下</pre>\n\n<p>2.文本属性</p>\n\n<pre>\n  \n  a)color     文字颜色\n  b)font-size \n              文字大小--浏览器默认大小是16px\n  c)font-weight:400|700\n              文本粗细\n  d)font-style:normal正常\n              italic 倾斜\n              文本样式\n  e)font-family \n              字体(一般英文在前,汉语在后)\n   &nbsp; &nbsp; &nbsp;  ((unicode--console--escape(&quot;宋体&quot;)--回车--(%u)换为(\\) ))\n  f)text-decoration:none无下划线\n                          underline下划线\n                          line-through;贯穿线\n              文本修饰        \n  g)连写:font:normal 400 20px/60px 宋体  (文字大小和字体是必须连写的属性)</pre>\n\n<p>3.颜色</p>\n\n<pre>\n  \n  a)直接书写英文名称 \n  b)十六进制颜色表达\n  c)rab 表示 \n  d)ragb 最后一个是透明度  opacity--透明度(0-1)  </pre>\n\n<p>4.背景属性</p>\n\n<pre>\n  \n  a)背景颜色  background-color\n  b)背景图片  background-image\n  c)背景平铺  background-repeat:repeat平铺\n                  no-repeat不平铺\n                  repeat-x水平平铺\n                  repeat-y垂直平铺 \n  d)背景图像定位 \n      background-position: left|right|center|top|bottom\n   &nbsp; &nbsp; 1)方位值 background-position: left top;\n   &nbsp; &nbsp;        一个方位词,另一个默认center; \n   &nbsp; &nbsp;        两个方位词--直接确定\n   &nbsp; &nbsp; 2)数值  background-position:20px 40px;\n   &nbsp; &nbsp;        一个数值距离左边,垂直方向居中;\n   &nbsp; &nbsp;        两个数值:距左边距离,距上边距离\n   &nbsp; &nbsp; 3)数值+方位值 background-position:left 100px;\n   &nbsp; &nbsp;        方位值在前,数值在后 &nbsp; \n   &nbsp; &nbsp;        数值在前,方位值在后\n  e)背景图片的附着(定位) \n      background-attchment:scroll 默认值,会随着滚动轴滚动 \n                          fixed; 背景图片固定-位置随着浏览器来偏移\n  f)背景缩放 \n      background-size:数值|cover|contain\n   &nbsp; &nbsp; 1)数值 \n   &nbsp; &nbsp;        一个数值 背景图片的宽度 另一个默认auto 等比例缩放 &nbsp; \n   &nbsp; &nbsp;        两个数值 &nbsp; 宽度 高度\n   &nbsp; &nbsp; 2)百分比\n   &nbsp; &nbsp;        一个百分比  容器宽度的百分比 等比例缩放 &nbsp;\n   &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  两个百分比 容器的百分比 等比例缩放\n   &nbsp; &nbsp; 3)cover  等比例缩放至完全覆盖 背景可能会超出容器\n   &nbsp; &nbsp; 4)contain 等比例缩放宽高与容器的宽高相等 背景图片始终包含在容器中\n  g)背景平铺原点\n      background-origin\n          background:url(&quot;&quot;) no-repeat;\n          1&gt;  默认是从内边距开始平铺的  background-origin:padding-box;\n          2&gt;  从边框开始平铺 &nbsp; background-origin:border-box;\n          3&gt;  从内容开始平铺   background-origin:content-box;\n  h)背景裁剪\n      某个区域外的背景都裁减掉\n      background-clip\n          1&gt;  默认是从边框以外裁减掉 &nbsp; background-clip:border-box;\n          2&gt;  是用内边距以外裁减掉   &nbsp; background-clip:padding-box;\n          3&gt;  是从内容以外裁减掉    &nbsp;  background-clip:content-box;\n  l)  多背景使用逗号分隔</pre>\n\n<p>&nbsp;</p>\n\n<p>三.选择器--选择哪些标签可以美化</p>\n\n<pre>\n  \n  1.标签选择器  div{width:200px}\n  2.类选择器 &nbsp;  .box{width:200px} 谁调用谁生效 多个标签可以调用一个 一个标签可以调用多个选择器\n  3.ID选择器 &nbsp; #box(width:200px}  谁调用谁生效 只能调用一次\n  4.通配符选择器 *{width:200px}  所有的\n  5.交集选择器 div.box{width:200px}--直接添加,无空格\n  6.并集选择器 .box,.box1{width:200px}--逗号\n  7.后代选择器 .box ul{width:200px}--空格  无限制隔代 父前子后\n  8.子代选择器 ul&gt;li{width:200px} --大于  直接的下一代\n  9.相邻选择器 li+li{width:200px} --加号\n  10.属性选择器\n  11.伪类选择器 --内值类 --lv哈哈\n   &nbsp;  a:link &nbsp; &nbsp; &nbsp; 超链接默认状态\n   &nbsp;  a:visited &nbsp;  超链接访问之后状态\n   &nbsp;  a:hover &nbsp; &nbsp;  超链接鼠标悬停状态\n   &nbsp;  a:active &nbsp; &nbsp; 超链接激活状态(鼠标按着不动)\n   &nbsp;  :focus &nbsp; &nbsp; &nbsp; 超链接获取光标焦点状态\n  12.结构(位置)选择器\n   &nbsp; a)选择父元素的第一个子元素 :first-child{width:200px};\n   &nbsp; b)选择父元素的N个子元素:nth-child(n){width:200px};\n   &nbsp; c)选择父元素的最后一个子元素:last-child{width:200px}\n   &nbsp; d)nth-last-child(-n-2){ ... }  选择父元素的倒数两个子元素\n   &nbsp; e)nth-child(3n+1){...} &nbsp; 每隔三个选择一次(规律)\n   &nbsp; \n   &nbsp; 寻找元素思路:\n   &nbsp; --&gt; 找到 .box\n   &nbsp; --&gt; 通过 .box 找到父元素 body\n   &nbsp; --&gt; 通过父元素 body 找所有的元素\n   &nbsp; --&gt; 找需要的子元素\n   &nbsp; --&gt; 判断这个原始不是是 .box &nbsp; 不是--&gt;任何元素不被选中\n   \n   &nbsp; 注意:\n   &nbsp;  1&gt;n的取值范围是从0开始\n   &nbsp;  2&gt;公式计算结果 生效范围 从1 开始 &nbsp;\n   &nbsp;  3&gt;n必须在公式前面\n   &nbsp;  \n  13.目标伪类选择器(配合锚点使用) :target{width:200px} 触发锚点时,锚点状态\n  14.伪元素选择器\n   a)首行伪类选择器 ::first-line{width:200px}\n   b)首字伪类选择器 ::first=letter{width:200px}\n   c)前后伪元素选择器--&gt;行内元素\n   &nbsp;  前伪元素 :brfore{content:&quot;&quot;;  width:200px}\n   &nbsp;  后伪元素 :after{content:&quot;&quot;, width:200px}\n  15.文本选择状态伪元素(只有点击才显示)  ::selection{属性值仅支持背景颜色,文本颜色}\n  16.属性选择器\n      [属性]    ==&gt; 通过属性来给某些标签添加样式\n      [属性=&quot;属性值&#39;]  ==&gt; 通过完整的属性值来给某些标签添加样式\n      a[href=&#39;a&#39;] ==&gt; 通过标签+属性值尅给某些标签添加样式\n      [属性*=&#39;abc&#39;] ==&gt; *属性的值包含字符abc的所有标签都生效\n      [属性^=&#39;abc&#39;] ==&gt; ^属性的值以abc开头的所有标签都生效\n      [属性$=&#39;abc&#39;] ==&gt; $属性的值以abc结尾的所有标签都生效效</pre>\n\n<p>四.元素的显示方式</p>\n\n<pre>\n  \n  1.块元素 &nbsp; &nbsp; div,h1-h6,p,li等\n   &nbsp; &nbsp;  特点:a)没有设置宽高,默认父元素的  b)设置宽高 c)独占一行 d)没有设置宽高,默认高度是0,是由内容撑开的\n   &nbsp; &nbsp;  转化:display:block;\n  2.行元素 &nbsp; &nbsp; span,a,del等\n   &nbsp; &nbsp;  特点:a)在一行显示  b)不能直接设置宽高  c)默认宽高是0,是由内容撑开的\n   &nbsp; &nbsp;  转化:display:inline;\n  3.行内块元素 img,input,textarea等\n   &nbsp; &nbsp;  特点:)在一行显示  b)可以设置宽高\n   &nbsp; &nbsp;  转化:display:inline-block;</pre>\n\n<p>五.CSS的三大特性</p>\n\n<pre>\n  \n  1: 层叠型 权重相同多个样式作用于同一个标签,发生了样式冲突,后面的样式会覆盖前面的样式\n  2: 继承性 基本上属性都具有继承性  a)A标签时不会继承父元素的文字颜色  b)标题标签不会继承父元素的文字大小\n  3: 优先级 默认样式 &lt; 标签选择器 &lt; 类选择器 &lt; ID选择器 &lt; 行内样式 &lt; !important\n   &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  0 &nbsp;  &lt; &nbsp;  1 &nbsp; &nbsp; &lt; &nbsp;  10 &nbsp; &lt; &nbsp; 100 &nbsp; &lt; &nbsp; 1000  &lt; &nbsp;  1000+\n   &nbsp; &nbsp; &nbsp; &nbsp;  继承的权重会增加,权重是会叠加的</pre>\n\n<p>六.盒子模型=外边距(margin)+边框(border)+内边距(padding)+内容(content)</p>\n\n<p>1.边框 boeder</p>\n\n<pre>\n  \n  a)颜色 border-top-color:red\n  b)线型 border-top-style:solid\\dashed\\dotted;实线\\虚线\\点线\n  c)粗细 border-top-width:10px;\n  d)连写 border: 10px solid red;(线型是必写的)\n  e)清除边框  border:0 none;\n  f)清除轮廓线 outline-style:none;\n  g)表格边框合并 border-callapse:callapse;</pre>\n\n<p>2.外边距 margin :left|right|center|top|bottom</p>\n\n<pre>\na)只写一个数值 margin=10px;--上下左右都是10px\nb)写两个数值 margin=10px,20px;--上下=10px,左右=20px\nc)写三个数值 margin=10px,20px,30px;--上=10px,左右=20px,下=30px\nd)写四个数值 margin=10px,20px,30px,40px;--上=10px,右=20px,下=30px,左=40px\ne)垂直方向的两个盒子,上盒子的下外边距,下盒子的上外边距,提取外边距值较大的\nf)嵌套的盒子,给子盒子设置外边距,子盒子自己没有顶外边距,顶外边距就像是在哪父盒子上\n    解决塌陷问题: \n    	1)给父盒子高 \n    	2)给父元素使用overflow:hidden\n\n\n</pre>\n\n<p>3.内边距 padding:left|right|center|top|bottom</p>\n\n<pre>\n a)只写一个数值 padding=10px;--上下左右都是10px\n b)写两个数值 padding=10px,20px;--上下=10px,左右=20px\n c)写三个数值 padding=10px,20px,30px;--上=10px,左右=20px,下=30px\n d)写四个数值 padding=10px,20px,30px,40px;--上=10px,右=20px,下=30px,左=40px\n e)嵌套的盒子.子盒子是没有设置宽高的,子盒子默认父元素的宽高,给子盒子设置两句,只要值不会超过父元素的宽度,子盒子就不会被撑大\n f)行内元素+行内块元素+内外边距   问题\n    1)行内元素不能定义上下的内外边距,可以定义左右的内外边距\n    2)行内块元素+块元素   可以定义上下左右的内外边距\n\n\n</pre>\n\n<p>七.盒模型</p>\n\n<pre>\n1.box-sizing:content-box边框和内边距不被包含在定义的宽高之中\n			border-box;边框和内边距被包含在设置的宽高之中\n			(解决padding值不用计算加减的问题)\n2.阴影 box-shadow:水平方向(正值向右,负值向左) \n				垂直方向(正值向下,负值向上) \n				模糊程度(无负值) \n				大小 \n				颜色;\n	text-shadow(文本阴影)\n3.矩形圆角 border-radius \n	一个值 四个角和某px的圆相切  \n	两个值 上下 左右 \n	三个值 上 左右 下 \n    四个值 上 右 下 左\n	宽=高 50%\n\n\n</pre>\n\n<p>八.浮动</p>\n\n<pre>\n1.标准流(文档流) 在页面上,元素自上而下,自左而右,块元素独占一行,行内元素在一行显示,直至碰到父元素的边框\n2.float : left|right|none;\n    特点:1)浮动的元素不占据原来的位置,会脱离标准流&#39;\n        2)浮动可以让元素在一行显示,而且代码换行也没有空格\n        3)浮动元素会浮动到父元素的左边和右边,会受到内边距的约束\n        4)浮动元素顶对齐\n        5)元素浮动之后默认宽高为0 ,不设置宽高,内容会撑开宽高,变成了行内块的显示模式\n        6)浮动的元素不会影响上面的块元素,只会影响下面的元素\n        7)行内元素使用浮动,转化为行内块的显示模式(不推荐使用,推荐使用display:inline-block;)\n    作用:\n    1)文本绕图 \n    2)导航制作 \n    3)页面布局\n    	a)一列固定宽度且居中 \n    	b)两列左窄右宽 \n    	c)通栏分布型\n    清除浮动:当父容器没有设置高度,里面的盒子没有设置浮动的情况下,会将父容器的高度撑开,一旦父容器中的盒子设置浮动,脱离标准文档流,父容器立马没有高度,下面的盒子就会跑到浮动的盒子下面,就要清除浮动产生的影响\n        a)给浮动元素的父元素设置高度\n        b)额外标签--给最后一个浮动元素添加额外标签 clear : left|right|both (不推荐使用,会产生不必要的代码)\n        c)给浮动元素的父元素使用overflow:hideen; 触发BFC (子元素超出了父元素的范围,子元素多余的部分也会隐藏)\n        d)后伪元素清除浮动(单伪元素).clearfix:after {content: &quot;&quot;;display: block;height: 0;line-height: 0;元素显示模式为隐藏visibility: hidden;clear: both;}兼容ie浏览器清除浮动.clearfix {zoom: 1;}\n        e)双伪元素清除浮动(常用).clearfix:after {content:&quot;&quot;;display: table;}.clearfix:after {clear: both;}\n\n\n</pre>\n\n<p>九.定位 position</p>\n\n<p>&nbsp;</p>\n\n<p>1.静态定位 static</p>\n\n<pre>\n标准流--默认值--不会动\n\n\n</pre>\n\n<p>2.绝对定位 absolute 看别人的脸色</p>\n\n<pre>\n  1)脱离标准流,不占据原来的位置\n  2)绝对定位的元素基于浏览器便宜\n  3)子绝父无,子元素基于浏览器偏移\n  4)子绝父绝,子元素基于父元素偏移\n  5)给行内元素使用绝对定位,可以转移为行内块的显示模式(不推荐使用,推荐使用display:inline-block;)\n\n\n</pre>\n\n<p>3.相对定位 relative</p>\n\n<pre>\n  1)相对定位的元素不脱离标准流,还占据原来的位置\n  2)相对定位的元素,位置基于自身位置偏移\n  3)子绝父相,子元素基于父元素偏移\n  4)给行内元素设置相对定位,不能转换为行内块的显示模式(不推荐使用,推荐使用display:inline-block;)\n\n\n</pre>\n\n<p>4.固定定位 fixed--一直在</p>\n\n<pre>\n  1)脱离标准流,不占据原来的位置\n  2)位置基于浏览器偏移\n  3)给行内元素使用固定定位,可以转移为行内块的显示模式(不推荐使用,推荐使用display:inline-block;)\n\n\n</pre>\n\n<p>5.其他属性</p>\n\n<pre>\n1)层叠顺序 z-index=1:(1-999,数值越大,层叠性越高)\n2)定位的盒子居中显示:\n	1)通过left:50%向左走父元素的一半  \n	2)通过margin-left:负值(自身的一半)   向右走自身的一半\n3)vertical-align:top		顶对齐\n				middle		垂直居中对齐\n				bottom		底对齐\n                  baseline;	  基线对齐(默认值)\n4)word-break : break-all|break-word; 换行是不另起一行 |  换行另起一行\n5)元素的显示和隐藏\n    1)display:none;         元素可见\n    2)display:block;        元素隐藏--不占据原来的位置\n    3)visibility:hidden;    元素隐藏--占据愿挨的位置\n    4)overflow:hidden;      溢出隐藏\n    5)overflow的溢出处理\n        overflow:bisible;   溢出可见-默认值\n        overflow:auto;      内容溢出生成滚动条,不溢出不生成滚动条\n        overflow:scroll;    无论内容是否溢出都生成滚动条\n        overflow:hidden;    溢出隐藏\n\n\n</pre>\n\n<p>十.CSS3</p>\n\n<p>1.精灵图(雪碧图)</p>\n\n<pre>\n处理网页背景图像的方式 background:url(&quot;路径&quot;) no-repeat -10px -20px; 坐标是负值\n\n\n</pre>\n\n<p>2.滑动门--不管多少文字,背景都可以显示</p>\n\n<pre>\nbody书写:主要是通过&lt;a href=&rdquo;#&rdquo;&gt;&lt;span&gt;&lt;/span&gt;&lt;/a&gt;\nstyle书写:a控制其中一边的圆角--padding-left:20px;================点击background:url(&quot;路径&quot;) -10px -10px;\n          span控制其中的文字+另外一边的圆角--padding-right:20px;==点击background:url(&quot;路径&quot;) right -10px;\n\n\n</pre>\n\n<p>3.伸缩盒子(弹性盒子)(移动端)</p>\n\n<pre>\na)默认主轴水平方向,侧轴是垂直方向\nb)调整主轴的对齐方式\n        justify-content:flex-start;         默认值，从主轴开始的位置对齐\n        justify-content:flex-end;           主轴结束的位置对齐\n        justify-content:center;             主轴居中对齐\n        justify-content:space-between;      两端对齐，中间等距分布\n        justify-content:space-around;       两端距离是中间等距分布的一半\nc)调整侧轴的对齐方式\n         align-items: flex-start;  从侧轴开始的位置对齐\n         align-items: flex-end;    从侧轴结束的位置对齐\n         align-items: center;      侧轴居中对齐\n         align-items: Stretch;     自动拉伸(如果侧轴是垂直方向，高度设置为auto，才会拉伸，如果侧轴是水平方向，宽度设置为auto，才会拉伸)\n         align-items: baseline.;   基线对齐\nd)调整主轴的方向\n              flex-direction: row;            默认值  主轴水平方向\n              flex-direction: column;         主轴垂直方向(侧轴变成水平方向)\n              flex-direction: row-reverse;    水平倒序显示\n              flex-direction: column-reverse; 垂直倒序显示\ne)多行伸缩盒子\n    flex-wrap:nowrap\\wrap\\wrap-reverse;  不换行\\换行\\倒序显示\nf)调整多行对齐方式\n  align-content: flex-start;   多行起始位置对齐\n  align-content:flex-end;      多行结束位置对齐\n  align-content:center;        多行居中对齐\n  align-content:space-between; 两端对齐，中间等距分布\n  align-content:space-around;  两端是中间等分的一半\n  align-content:strech;        默认值 (实现拉伸效果，需要将宽或者高设置为auto)\ng)flex 设置比例  flex:1;   flex:2;  flex:3; \n	三个子盒子，第一个1/6,第二个2/6,第三个3/6\n\n\n</pre>\n\n<p>&nbsp;</p>\n\n<p>&nbsp;</p>\n\n<p>4.过渡--从a属性到b属性</p>\n\n<pre>\na)过渡属性transition-property: none  |  all;  all全部属性过渡\nb)过渡时间transition-duration:1s;\nc)过渡速度transition-timing-function：linear;匀速\nd)过渡延时transition-delay: 2s;\ne)过渡连写transition:all 1s linear 2s; --  过渡时间是必写属性\n\n\n</pre>\n\n<p>5.2D转换</p>\n\n<pre>\na)位移 transform:translateX(200px,200px);  水平方向,正值向右，负值向左。translateY(200px);  垂直方向,正值向下，负值向上。\n\n\n</pre>\n\n<pre>\nb)旋转 transform: rotatX(30deg) rotatY(30deg) rotatZ(30deg);沿着X轴旋转  rotatY沿着Y轴旋转  rotatZ沿着Z轴旋转\n\n\n</pre>\n\n<pre>\nc)缩放 transform:scale(0,4,0.6) 一个值-宽高等比例缩放 两个值-宽 高\n\n\n</pre>\n\n<pre>\nd)倾斜 transfoem:skew(40deg,60deg)  skewX沿X轴倾斜 skewY沿Y轴倾斜\n\n\n</pre>\n\n<pre>\ne)中心点 transform-origin:left\\10px; 写一个方位值\\数值，另外一个默认center\n        transform: right top; 2个方位值\n        transform: 10px 30px;  第一个距左边的距离，第二个距顶边的距离。\n\n\n</pre>\n\n<p>6.动画</p>\n\n<pre>\na)动画名称   animation-name:  move;\nb)动画播放时间 animation-duration: 1s;\nc)动画播放延时 animation-delay: 2s;\nd)动画播放次数 animation-iteration-count: 1 | infinite;  默认值是1， 循环播放\ne)动画播放速度 animation-timing-function: ease;  默认值\nf)动画的方向  animation-direction: normal		默认值 只正向运行，不反向\n								reverse			反向运动\n								alternate		先正向，再反向，交替运行\n								alternat-reverse;  先反向，再正向，交替运行\ng)动画结束的状态 animation-fill-mode: none默认值  默认状态\n									forwards	动画停止在结束状态\n									backwards	动画停止在开始状态\n									both;  根据次数决定结束状态\nh)动画属性连写：动画名称和播放时间为必写属性\nl)动画的暂停和播放  animation-play-state: running	默认值   播放\n                                      paused;    暂停\ni)定义动画集\n     1)简单动画集(动画序列)\n        @keyframs move{ \n          form{ 开始状态 } \n          to{结束状态} \n        }\n     2)复杂的动画序列\n        @keyframs move{\n            0%{ }\n            50%{ }\n            100%{ } \n        }\n\n\n</pre>\n\n<p>7.3D转换--左手坐标系</p>\n\n<pre>\na)透视perspective:20px;\n    1.作为一个属性，设置给父元素，作用于所有3D转换的子元素\n    2.作为transform属性的一个值，做用于元素自身\nb)顺着轴的正方向看,顺时针旋转负角度,逆时针旋转正角度\n	对着轴的正方向看,顺时针旋转正角度,逆时针旋转负角度\nc)视觉距离  辅助开发    perspective: 500px;\nd)如果要3d呈现    transform-style: preserve-3d;\n\n\n</pre>\n\n<p>8.线型渐变</p>\n\n<pre>\nbackground-image:linear-gradient(45deg,red,yellow) \n              默认方向是自上而下 \n              方向是left\\right\\top\\bottom\n              transparent --- 完全透明\n              角度  百分比-占父元素的宽\\高\n\n\n</pre>\n\n<pre>\n文字渐变   \nh1 {\n  background-image: -webkit-linear-gradient(left, rgb(255, 42, 42), rgb(241, 57, 210)); \n  -webkit-background-clip: text;\n  -webkit-text-fill-color: transparent;\n  }\n\n\n</pre>\n\n<p>9.CSS3 怎么在IE6版本的浏览器中调用</p>\n\n<pre>\n在头部引入\n	&lt;!--[if lte IE 8]&gt;\n    &lt;script src=&quot;html5shiv.min.js&quot;&gt;&lt;/script&gt;\n    &lt;![endif]--&gt;\n    \n    \n    \n&lt;!--1. 语义化标签在IE8以下不支持--&gt;\n&lt;!--2. 解决方法：用div代替，失去了语义化的意义--&gt;\n&lt;!--3. 语义化作用：利于搜索引擎优化--&gt;\n&lt;!--4. 有个插件 做兼容 语义化标签的兼容 --&gt;\n&lt;!--5. html5shiv.js  下载：https://github.com/aFarkas/html5shiv--&gt;\n&lt;!--6. 引入：注意需要在头部引入  提前解析html标签--&gt;\n&lt;!--7. 有些版本是不需要这个文件  因为本就支持--&gt;\n&lt;!--8. 思路：判断浏览器的版本 按需加载 --&gt;\n&lt;!--9. 通过  **条件注释** lt 小于 gt 大于 lte 小于等于 gte 大于等于   来判断--&gt;\n&lt;!--[if lte IE 8]&gt;\n    &lt;h1&gt;您的版本浏览器过低，请您升级&lt;/h1&gt;\n&lt;![endif]--&gt;\n\n\n</pre>\n\n<p>10.video</p>\n\n<pre>\n	&lt;figcaption&gt; 标题 &lt;/figcaption&gt;\n\n\n</pre>\n\n<p>? --&gt;1.视频标签 控制让在不同的浏览器表示形式不一样, 造成用户体验下降? --&gt;2.自定义播放器 使用自己定义的控制栏 每个浏览器就一致了? --&gt;3.自定义的控制栏默认是没有的 需要自己去添加相关的功能那个? --&gt;4.多媒体API是没有全屏(取消全屏)功能的</p>\n\n<pre>\n--&gt;		requestFullScreen  全屏API\n\n  document.body.webkitRequestFullScreen();	页面内容全屏\n  document.documentElement.webkitRequestFullScreen();	页面全屏\n\n--&gt;		cancelFullScreen	取消全屏 (统一控制)\n	documen.webkitCancelFullScreen();	取消全屏\n\n\n\n</pre>\n\n<p>? --&gt; 私有前缀</p>\n\n<pre>\n内核--&gt;浏览器\n      webkit  	谷歌		标签.webkitRequestFullScreen();\n      moz  		火狐\n      ms		IE\n      o			欧朋\n兼容的属性   +   私有前缀\nCSS兼容  -内核前缀-属性	\n       -webkit-transition: all 1s;\n        -moz-transition: all 1s;\n        -ms-transition: all 1s;\n        -o-transition: all 1s;\n\n\n\n\n</pre>\n\n<p>? --&gt;添加功能</p>\n\n<pre>\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;title&gt;视频播放&lt;/title&gt;\n    &lt;!--字体图标库--&gt;\n    &lt;link rel=&quot;stylesheet&quot; href=&quot;css/font-awesome.css&quot;/&gt;\n    &lt;link rel=&quot;stylesheet&quot; href=&quot;css/player.css&quot;/&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;figure&gt;\n    &lt;figcaption&gt;视频播放器&lt;/figcaption&gt;\n    &lt;div class=&quot;player&quot;&gt;\n        &lt;video src=&quot;./video/fun.mp4&quot;&gt;&lt;/video&gt;\n        &lt;div class=&quot;controls&quot;&gt;\n            &lt;!--播放/暂停--&gt;\n            &lt;a href=&quot;javascript:;&quot; class=&quot;switch fa fa-play&quot;&gt;&lt;/a&gt;\n            &lt;!--播放进度--&gt;\n            &lt;div class=&quot;progress&quot;&gt;\n                &lt;div class=&quot;line&quot;&gt;&lt;/div&gt;\n                &lt;div class=&quot;bar&quot;&gt;&lt;/div&gt;\n            &lt;/div&gt;\n            &lt;!--当前播放时间/播放总时长--&gt;\n            &lt;div class=&quot;timer&quot;&gt;\n                &lt;span class=&quot;current&quot;&gt;00:00:00&lt;/span&gt; / &lt;span class=&quot;total&quot;&gt;00:00:00&lt;/span&gt;\n            &lt;/div&gt;\n            &lt;!--全屏/取消全屏--&gt;\n            &lt;a href=&quot;javascript:;&quot; class=&quot;expand fa fa-arrows-alt&quot;&gt;&lt;/a&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n&lt;/figure&gt;\n&lt;script src=&quot;./js/jquery.min.js&quot;&gt;&lt;/script&gt;\n&lt;script&gt;\n    $(function () {\n        /*获取操作元素*/\n        var $video = $(&#39;video&#39;);\n        // console.log($video);\n        /*但是注意：所有的h5对应多媒体的api属于 原生的dom对象 */\n        var video = $video.get(0); //[0]\n        // console.log(video);\n        /*播放和暂停按钮*/\n        var $switch = $(&#39;.switch&#39;);\n        /*默认的条*/\n        var $bar = $(&#39;.bar&#39;);\n        /*进度的条*/\n        var $line = $(&#39;.line&#39;);\n        /*当前播放时间*/\n        var $current = $(&#39;.current&#39;);\n        /*播放总时长*/\n        var $total = $(&#39;.total&#39;);\n        /*全屏/取消全屏*/\n        var $expand = $(&#39;.expand&#39;);\n        /*转换时间格式*/\n        var formatTime = function (time) {\n            /*time 秒*/\n            /*10:20:30 格式  字符串*/\n            var h = Math.floor(time / 3600);\n            var m = Math.floor(time % 3600 / 60);\n            var s = Math.floor(time % 60);\n            return (h &lt; 10 ? &#39;0&#39; + h : h) + &#39;:&#39;+(m &lt; 10 ? &#39;0&#39; + m : m)+&#39;:&#39;+(s &lt; 10 ? &#39;0&#39; + s : s);\n        }\n\n        /*1.完成加载效果  视频显示 总时长显示 */\n        // 下载的可以播放了去做这些事情\n        video.oncanplay = function () {\n            /*视频显示*/\n            $video.show();\n            /*获取当前视频总时长  单位是秒 还有小数*/\n            /*转换格式*/\n            $total.html(formatTime(video.duration));\n        }\n\n        /*2.播放和暂停  */\n        $switch.on(&#39;click&#39;,function () {\n            if($switch.hasClass(&#39;fa-pause&#39;)){\n                /*播放状态  暂停操作*/\n                video.pause();\n                $switch.removeClass(&#39;fa-pause&#39;);\n            }else{\n                /*暂停状态  播放操作*/\n                video.play();\n                $switch.addClass(&#39;fa-pause&#39;);\n            }\n        });\n\n        /*3.播放过程当中效果 进度显示 当前播放时间的显示 */\n        /*根据当前播放时间*/\n        video.ontimeupdate = function () {\n            $current.html(formatTime(video.currentTime));\n            /*进度显示*/\n            var ratio = video.currentTime/video.duration;\n            var p = ratio * 100 + &#39;%&#39;;\n            $line.css(&#39;width&#39;,p);\n        }\n\n        /*4.跃进功能  点击进度条  根据点击位置跳转播放进度 */\n        $bar.on(&#39;click&#39;,function (e) {\n            /*关键点：怎么获取点击的时候距离左边的距离*/\n            /* offsetX/Y 是当前点击的位置距离当前元素的左边和上面距离 坐标 */\n            /*得到当前的播放时间*/\n            var currentTime = e.offsetX/$bar.width()*video.duration;\n            /*跃进*/\n            video.currentTime = currentTime;\n        });\n        /*5.全屏和取消全屏*/\n        $expand.on(&#39;click&#39;,function () {\n            if($expand.hasClass(&#39;fa-compress&#39;)){\n                /*全屏状态   取消全屏操作*/\n                document.webkitCancelFullScreen();\n                $expand.removeClass(&#39;fa-compress&#39;).addClass(&#39;fa-arrows-alt&#39;);\n            }else{\n                /*非全屏状态   全屏操作*/\n                video.webkitRequestFullScreen();\n                $expand.addClass(&#39;fa-compress&#39;).removeClass(&#39;fa-arrows-alt&#39;);\n            }\n        });\n\n        /*6.播放完成重置*/\n        video.onended = function () {\n            /*按钮*/\n            $switch.removeClass(&#39;fa-pause&#39;);\n            /*进度条*/\n            /*当前播放时间*/\n            video.currentTime = 0;\n        }\n    });\n&lt;/script&gt;\n\n\n</pre>\n\n<ol>\n	<li>\n	<p>history</p>\n\n	<p>web spa(网页版应用程序)</p>\n	</li>\n</ol>\n\n<pre>\n	显示模式==&gt;正常页面跳转 , 点击按钮的时候并没有进行跳转 页面内容更新过,地址栏页面更新过\n	spa:single page application 页面内容的更改是用过sjax来实现的(更改哈希值是不会页面跳转的,history也可以更改地址栏但是不跳转)\n\n\n</pre>\n\n<p>? history(内置的管理历史记录的对象)</p>\n\n<pre>\n	history.back( )   回退历史\n	history.forward( )	前进历史\n	history.go( )	基于当前历史的位置跳转,跳动的历史(1,-1)\n\n\n</pre>\n\n<p>? history新增方法</p>\n\n<pre>\n	1&gt;	pushState(data,title,&#39;url&#39;);	\n		往当前的历史记录中追加一条,不会跳转\n	2&gt;	repaiceState( data,title,&#39;url &#39;);	\n		把当前这条历史记录替换成新的,不会跳转\n	3&gt;	window.onpopstate = function ( ) { }  \n		监听历史记录的事件\n	4&gt;	(data,title,&#39;url&#39;)\n        data 用于存储自定义数据，通常设为null\n        + title 网页标题，基本上没有被支持，一般设为空\n        + url 以当前域为基础增加一条历史记录，不可跨域设置\n\n\n\n</pre>\n\n<p>? 好处</p>\n\n<pre>\n	--&gt; 提高网页的性能(减少网络资源请求)\n	--&gt; 优化搜索引擎(SEO)\n		--&gt;去百度搜索,按照关键字搜索\n		--&gt;出现搜索结果(页面的内容和关键字有关系)\n		--&gt;如果是ajax渲染 页面回到了最初的状态 地址栏没有改变 \n		--&gt;通过history.pushState( ) 更改了地址\n		--&gt;更改一定要和真实同步渲染的时候的地址是一样的\n		--&gt;切换历史的时候 内容不会更改\n		--&gt;去监听地址懒得改变 根据地址重新渲染内容window.onpopstate = function ( ) { }  \n		\n\n\n</pre>\n\n<p>? 扩展</p>\n\n<pre>\n同步渲染\n	优--&gt; 地址与页面相对应\n	  --&gt;搜索引擎去收录页面的时候,根据这个地址能获取到页面的了龙\n	  --&gt;满足SEO\n	缺--&gt;请求次数多,体验不好\n异步渲染\n	优--&gt;减少请求吃屎,提高用户体验\n	缺--&gt;不满足SEO条件,内容是异步加载的\n\n\n</pre>\n\n<p>12.storage 存储</p>\n\n<pre>\n	服务端存储 session\n	客服端存储 \n	1&gt;cookie \n			兼容性好\n			存储量小:4kb左右\n			生命周期:自己去控制\n	2&gt;localStorage\n				H5提供的本地存储\n				存储量小:20mb大小\n				生命周期:永久\n				存储数据类型:字符串\n						复杂数据(json  轻量级文本数据交换格式)\n							\n	3&gt;sessionStorage\n				H5提供的本地存储\n				存储量小:5mb大小\n				生命周期:会话结束就清除(浏览器关闭)\n				存储数据类型:字符串\n						复杂数据(json  轻量级文本数据交换格式)\n\n\n</pre>\n\n<p>方法</p>\n\n<pre>\n1&gt;localStorage\n    localStorage.setItem(key,value);	设置存储内容\n    localStorage.getItem(key);		读取存储内容\n    localStorage.removeItem(key);	删除键值为key的存储内容\n    localStorage.clear();			清空客户端所有的本地存储\n2&gt;sessionStorage\n    sessionStorage.setItem(key,value);	设置存储内容\n    sessionStorage.getItem(key);		读取存储内容\n    sessionStorage.removeItem(key);	删除键值为key的存储内容\n    sessionStorage.clear();			清空客户端所有的本地存储\n\n\n</pre>\n\n<p>13.地理定位</p>\n\n<blockquote>\n<p>在HTML规范中，增加了获取用户地理信息的API，这样使得我们可以基于用户位置开发互联网应用，即基于位置服务 (Location Base Service)</p>\n</blockquote>\n\n<ul>\n	<li>\n	<p>获取当前地理信息</p>\n	</li>\n</ul>\n\n<pre>\nnavigator.geolocation.getCurrentPosition(successCallback, errorCallback) \n\n\n</pre>\n\n<ul>\n	<li>\n	<p>重复获取当前地理信息</p>\n	</li>\n</ul>\n\n<pre>\nnavigator. geolocation.watchPosition(successCallback, errorCallback)\n\n\n</pre>\n\n<ul>\n	<li>\n	<p>当成功获取地理信息后，会调用succssCallback，并返回一个包含位置信息的对象position。</p>\n\n	<pre>\nposition.coords.latitude纬度\n\nposition.coords.longitude经度\n\nposition.coords.accuracy精度\n\nposition.coords.altitude海拔高度\n\n\n</pre>\n	</li>\n	<li>\n	<p>当获取地理信息失败后，会调用errorCallback，并返回错误信息error</p>\n	</li>\n	<li>\n	<p>在现实开发中，通过调用第三方API（如百度地图）来实现地理定位信息，这些API都是基于用户当前位置的，并将用位置位置（经/纬度）当做参数传递，就可以实现相应的功能。</p>\n	</li>\n	<li>\n	<p>电脑不能获取地理定位,服务器是国外的,国内无法获取,手机上面是没有任何的限制的</p>\n	</li>\n</ul>\n\n<p>&nbsp;</p>\n\n<p>&nbsp;</p>\n\n<p>&nbsp;</p>\n\n<p>十一.用户界面样式</p>\n\n<p>1.设置鼠标悬停样式</p>\n\n<pre>\n	cursor:default默认值\n    		pointer小手\n    		move移动\n    		text; 文本\n\n\n</pre>\n\n<p>2.清除轮廓线</p>\n\n<pre>\n	outline-style:none;\n\n\n</pre>\n\n<p>3.禁止文本域拖拽</p>\n\n<pre>\n	textarea{resize:none;}\n\n\n</pre>\n\n<p>4.溢出文字省略号</p>\n\n<pre>\n		   overflow: hidden;\n            text-overflow:ellipsis;\n            white-space: nowrap;\n\n\n</pre>\n\n<ol>\n	<li>\n	<p>emmet快捷键emmet是我们在sublime中的一个插件在这个插件中集成很多的快捷键。</p>\n\n	<pre>\na)生成结构的快捷键  ！+ tab,可以生成html5的结构代码。\nb)生成id名和类名--标签名.类名#id名+tab   没有标签名.类名+tab ==&gt;div.类名\nc)生成同级元素--标签名+标签名+标签名 &ldquo;+&rdquo;tab\nd)生成子类标签--标签名&gt;子标签名&gt;子标签名&gt;子标签名+tab   标签名&gt;子标签名&gt;子标签名&gt;子标签名^^子标签名+tab\ne)带固定数量的标签--ul&gt;li*5+tab\nf)带有序号名称--ul&gt;li.abc$*3 + tab\ng)生成带有内容的标签-ul&gt;li&gt;a{item}*5\nh)w30+tab&gt;h30+tab&gt;mg30+tab&gt;pd30+tab&gt;lh12px+tab&gt;bg+tab等\n\n\n</pre>\n	</li>\n</ol>\n\n<pre>\n  6.用户体验性\n\n\n</pre>\n\n<pre>\n  ?	--&gt; 培养用户的懒习惯,用最少的操作,去得到最多的东西\n\n\n</pre>\n\n<pre>\n  ?	--&gt; 用户的依赖性\n\n\n</pre>\n\n<p>十二.插件的使用</p>\n\n<p>? --&gt;FullPage插件</p>\n\n<p>? --&gt;Stellar插件</p>\n', '/uploads\\avatar-1519657331731.png', '2014', '7', '26');
INSERT INTO `article` VALUES ('160', '电商前台搭建', '项目搭建+注册+登录+自动登录+模版公共部分提取+分类商品展示+商品详情页展示+个人信息页+添加商品至购物车+中间件查询出狗鳄鱼车商品信息+登录后购物车信息同步至数据库+购物车结算+订单生成+添加地址', '<p>项目搭建</p>\n\n<p>1.express-generator生成基本的项目结构(需要为debug配置环境变量,来打印一些信息)</p>\n\n<p>2.standard来统一代码风格(standard --fix可以修复代码)</p>\n\n<p>3.set只能在window系统下设置环境变量，使用cross-env来实现跨平台设置环境变量</p>\n\n<p>4.将hbs换成express-hbs，并按照淘宝镜像的官网配置</p>\n\n<p>5.整合全部静态资源到 public 目录</p>\n\n<p>6.使用 Sequelice 数据模型的方式访问数据库(由于已经有了数据库结构，借助sequelize-auto自动生成数据模型代码)</p>\n\n<p>7.数据表模型载入，配置index.js页(glod来匹配路径，并且同步来执行)</p>\n\n<pre>\n  const path = require(&#39;path&#39;)\n  ​\n  // 自动匹配路径\n  const glob = require(&#39;glob&#39;)\n  // ORM 框架\n  const Sequelize = require(&#39;sequelize&#39;)\n  ​\n  const sequelize = new Sequelize({\n   &nbsp;dialect: &#39;mysql&#39;,\n   &nbsp;host: &#39;127.0.0.1&#39;,\n   &nbsp;database: &#39;newshop2&#39;,\n   &nbsp;username: &#39;root&#39;,\n   &nbsp;password: &#39;199619&#39;,\n   &nbsp;logging: false,\n   &nbsp;配置该选项，关闭创建时间和修改时间列的创建\n   &nbsp;define: {\n   &nbsp; &nbsp;timestamps: false\n    }\n  })\n  ​\n  glob.sync(&#39;*.js&#39;, { cwd: __dirname })\n    .filter(item =&gt; item !== &#39;index.js&#39;)\n    .forEach(item =&gt; {\n   &nbsp; &nbsp;const model = sequelize.import(path.join(__dirname, item))\n   &nbsp; &nbsp;exports[model.name] = model\n    })</pre>\n\n<p>8.创建controllers文件夹，至此MVC思想的结构搭建完成(views-放置模板，models-数据控制，controllers-将数据与模板结合)</p>\n\n<p>注册</p>\n\n<p>需求：用户提交数据，进行数据验证，数据持久化，并像用户邮箱发送验证信息</p>\n\n<p>实现：</p>\n\n<p>1.表单提交数据，后端进行数据验证</p>\n\n<p>2.验证成功，用uuid生成唯一标示字符串，用bcryptjs来对密码进程加密处理</p>\n\n<p>3.使用nodemailer来发送文件，配置发送者的信息</p>\n\n<pre>\n  \n  const nodemailer = require(&#39;nodemailer&#39;)\n  ​\n  const config = require(&#39;./config&#39;)\n  ​\n  const transporter = nodemailer.createTransport(config.mail)\n  ​\n  exports.sendEmail = (to, subject, content) =&gt; {\n   &nbsp;const message = {\n   &nbsp; &nbsp;from: config.mail.auth.user,\n   &nbsp; &nbsp;to: to,\n   &nbsp; &nbsp;subject: subject,\n   &nbsp; &nbsp;html: content\n    }\n  ​\n   &nbsp;return transporter.sendMail(message)\n  }</pre>\n\n<p>4.邮件发送成功后，跳转到登录页</p>\n\n<p>登录</p>\n\n<p>需求：验证登录信息，并验证验证码正确，如果用户点击自动登录，则一个月内访问网站时不需要再登录，如果用户是跳转过来，登录后需要跳转回去</p>\n\n<p>实现：</p>\n\n<p>1.如果是跳转过来，取出url参数中的redirect，并存入页面的隐藏域中，随着登录信息一起提交</p>\n\n<p>2.访问登录页，使用svg-captcha来生成验证码,并将信息存入session</p>\n\n<pre>\n  \n  const captcha = require(&#39;svg-captcha&#39;)\n  ​\n  exports.captcha = (req, res) =&gt; {\n   &nbsp;const svg = captcha.create()\n  ​\n   &nbsp;req.session.captcha = svg.text\n  ​\n   &nbsp;res.type(&#39;svg&#39;)\n   &nbsp;res.send(svg.data)\n  }</pre>\n\n<p>3.信息提交后，验证登录信息，并验证验证码信息</p>\n\n<p>4.登录成功后，如果自动登录，则将用户登录信息存入cookie中，设置生命周期为一个月</p>\n\n<p>5.如果存在returnurl，则重定向到该地址</p>\n\n<p>自动登录中间件</p>\n\n<p>需求：如果用户登录时点击了自动登录，下次访问时我们要用cookie中的信息为用户登录</p>\n\n<p>实现：</p>\n\n<p>1.因为用户下次可能访问任何页面，所以该操作需要放置在中间件里，每个请求都需要经过</p>\n\n<p>2.如果当前用户没有登录，判断请求的cookie中有没有info，没有就next，如果有就取出cookie中信息，为用户登录，再next</p>\n\n<p>模板公用部分提取</p>\n\n<p>需求：因为多个页面只有版心部分不同，所以可以提取出公共部分便于维护，并且我们需要动态获取侧边栏的商品分类列表</p>\n\n<p>实现：</p>\n\n<p>1.将公共部分提取到 layout.hbs中，在每个用到的文件中，通过{{!&lt; layout}}将该页内容导出</p>\n\n<p>2.将每个不同的版心中，共同的部分提取出来，放置到partials文件夹下，并补全模板配置，将提取出来的内容在需要的文件中通过{{&gt; 文件名}}导入</p>\n\n<p>3.编写异步的&lsquo;categories &rsquo; helper，在模板渲染的时候来获取商品分类列表，由于数据在数据库中是并列存放的，我们需要根据cart_id和cart_pid来判断信息的归属关系，并且需要一个三级的数组结构来遍历，因此使用递归，代码如下：</p>\n\n<pre>\n  \n   &nbsp; &nbsp; &nbsp;var fun = function (level) {\n   &nbsp; &nbsp; &nbsp; &nbsp;return data.filter(v =&gt; {\n   &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;return v.cat_pid === level\n   &nbsp; &nbsp; &nbsp;  })\n   &nbsp; &nbsp; &nbsp;  .map(v =&gt; {\n   &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;v.children = fun(v.cat_id)\n   &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;return v\n   &nbsp; &nbsp; &nbsp;  })\n   &nbsp; &nbsp;  }</pre>\n\n<p>分类商品展示</p>\n\n<p>需求：点击不同的商品分类，需要展示当前分类下商品，并且需要分页展示</p>\n\n<p>实现：</p>\n\n<p>1.使用req.originalUrl取出当前请求url地址，并绑定到locals上面</p>\n\n<p>2.先根据url参数中的的cat_id在Category中查找该分类为几级分类</p>\n\n<p>3.根据url中的page(默认为1)，sort(默认为时间),和查找出来的几级分类在Goods表中取出相应数据,</p>\n\n<p>默认一次取出5条数据，offset为(page - 1)*5</p>\n\n<p>4.再查找当前分类下共多条数据，计算出总页数</p>\n\n<p>5.编写&lsquo;pagination&rsquo;，helper来实现分页功能,逻辑如下：</p>\n\n<blockquote>\n<p>1.不同页数的请求地址，只是page参数不同，其他一样，所以在helper中通过this取出locals中的originalUrl，并使用内置的url模块进行解析(url.parse)，解析后成为一个地址对象，page在对象的query属性中，通过更改query中的page，*必须要删除掉地址对象中的search属性，再使用url.format生成一个新的地址</p>\n\n<pre>\n  \n   &nbsp;const urlObj = url.parse(this.originalUrl, true)\n  ​\n   &nbsp;function getPage (page) {\n   &nbsp; &nbsp;urlObj.query.page = page\n   &nbsp; &nbsp;delete urlObj.search\n   &nbsp; &nbsp;return url.format(urlObj)\n    }</pre>\n\n<p>2.默认下面显示5个页码，并且根据当前页码动态改变</p>\n\n<pre>\n  \n   &nbsp;const visibles = 5\n   &nbsp;const regin = Math.floor(visibles / 2)\n   &nbsp;//start为起始页码\n   &nbsp;let start = current - regin\n   &nbsp;start = start &lt; 1 ? 1 : start\n   &nbsp;//end为结束页码\n   &nbsp;let end = start + visibles - 1\n   &nbsp;end = end &gt; total ? total : end\n  ​\n   &nbsp;start = end - visibles + 1\n   &nbsp;start = start &lt; 1 ? 1 : start</pre>\n\n<p>3.分页部分的结构通过拼接字符串，使用 return new hbs.SafeString(字符串)将字符串返回给模板解析</p>\n</blockquote>\n\n<p>商品详情信息展示</p>\n\n<p>需求：点击商品，进入商品详情页，展示该商品信息</p>\n\n<p>实现：</p>\n\n<p>1.根据url中的id参数，在goods表中查找该商品信息</p>\n\n<p>2.在goods_pics中将对应id的图片地址信息找出，绑定到locals上(在hbs中，使用array.n来获取数组中索引n的元素)</p>\n\n<p>3.根据商品数据中的不同分类级别的id，在Category表中查找出每个分类级别名称</p>\n\n<p>个人信息页</p>\n\n<p>需求：该页面展示用户个人信息，并且提供更改功能，包括头像上传，form表单域信息提交，文本域</p>\n\n<p>实现：</p>\n\n<blockquote>\n<p>1.将form添加属性<code>enctype=&quot;multipart/form-data&quot;</code> ,input标签的type属性为file，并且添加change事件</p>\n\n<p>2.使用FileReader构造函数来实现图片预览</p>\n\n<pre>\n  \n  $(function($){\n   &nbsp; &nbsp;$(&#39;#avatar&#39;).on(&#39;change&#39;, function(){\n   &nbsp; &nbsp; &nbsp;var $this = $(this)\n   &nbsp; &nbsp; &nbsp;取到上传的第一个文件对象\n   &nbsp; &nbsp; &nbsp;var file = $(this).prop(&#39;files&#39;)[0]\n   &nbsp; &nbsp; &nbsp;var reader = new FileReader()\n   &nbsp; &nbsp; &nbsp;reader.readAsDataURL(file)\n       \n   &nbsp; &nbsp; &nbsp;reader.onload = function () {\n   &nbsp; &nbsp; &nbsp; &nbsp; $this.prev().fadeOut(function () {\n   &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; $(this).attr(&#39;src&#39;, reader.result).fadeIn()\n   &nbsp; &nbsp; &nbsp; &nbsp; })\n   &nbsp; &nbsp; &nbsp; }\n   &nbsp;  })\n    })</pre>\n\n<p>3.表单信息提交，使用fs模块的fs.rename来改变文件地址</p>\n\n<p>4.使用util模块将异步的fs.rename变成promise模式</p>\n\n<p>5.使用multer模块来处理表单文件</p>\n\n<blockquote>\n<p>1.配置multer</p>\n\n<pre>\n  \n  dest为文件保存位置，如果不写则文件将保存在内存中，永远不会写入磁盘。\n  upload = multer({ dest: &#39;public/uploads&#39; })\n  ​\n  ​\n  upload.single(&#39;avatar&#39;)\n  接受带有名称的单个文件fieldname。单个文件将被存储在req.file。</pre>\n</blockquote>\n\n<p>6.根据id查找用户信息，取出表单提交数据，使用Object.assign来合并两个对象，并重新持久化</p>\n\n<p>7.将session里面和locals里面的用户信息更新</p>\n</blockquote>\n\n<p>添加商品到购物车</p>\n\n<p>需求：点击添加到购物车，将选中商品数量和id存入cookie中(登录前)或者数据库中(登陆后)，并跳转到提示信息页</p>\n\n<p>实现：</p>\n\n<p>1.根据商品id在goods表中查询出商品信息</p>\n\n<p>2.取出cookie中购物车信息或者数据库中购物车信息</p>\n\n<p>3.遍历购物车信息数组，种类相同则amount相加，否则添加新数组项</p>\n\n<p>4.封装一个函数，用来从数据库中取出购物车信息</p>\n\n<pre>\n  \n  function getFromDatebase (user_id) {\n   &nbsp;如果数据库中没有购物车信息，则创建一个\n   &nbsp;return UserCart.findOrCreate({\n   &nbsp; &nbsp;where: { user_id },\n   &nbsp; &nbsp;defaults: {\n   &nbsp; &nbsp; &nbsp;user_id: user_id,\n   &nbsp; &nbsp; &nbsp;cart_info: &#39;[]&#39;,\n   &nbsp; &nbsp; &nbsp;created_at: Date.now() / 1000,\n   &nbsp; &nbsp; &nbsp;updated_at: Date.now() / 1000\n   &nbsp;  }\n    })\n   &nbsp;返回的数据是一个数组，第一个元素是数据，第二个元素true为创建出来的数据，false为查询出来的数据\n    .then(([ cart, created ]) =&gt; {\n      let cartList = []\n      try {\n   &nbsp; &nbsp; &nbsp;如果是创建出来的数据，cart.cart_info为空，json.parse会报错\n       &nbsp;cartList = JSON.parse(cart.cart_info)\n      } catch (e) {\n       &nbsp;cartList = []\n      }\n      return cartList\n    })\n  }</pre>\n\n<p>5.将新的购物车信息数组存入cookie中或者数据库中</p>\n\n<p>中间件来查询出购物车商品信息</p>\n\n<p>需求：因为页面侧边需要展示购物车信息，所以我们需要一个中间件来查询出来购物车的一些信息</p>\n\n<p>实现：</p>\n\n<p>1.Promise.resolve()开启一个promise链</p>\n\n<p>2.取出cookie中或者数据库中购物车信息</p>\n\n<p>3.promise.all来同时一起回调多个商品信息查找的异步操作</p>\n\n<p>4.将商品信息绑定到locals</p>\n\n<p>5.计算出商品总价和总数量</p>\n\n<pre>\n  \n  res.locals.cartTotalPrice = data.reduce((prev, next) =&gt; prev + next.total, 0)\n  res.locals.cartTotalCount = data.reduce((prev, next) =&gt; prev + next.amount, 0)</pre>\n\n<p>登陆后购物车信息同步到数据库</p>\n\n<p>需求：登录前的购物车信息存储在cookie中的cart_List里，登陆后的购物车信息存储在数据库的user_cart表中，在用户登陆后，需要将cookie中的信息存储在数据库中</p>\n\n<p>实现：在用户登录验证成功后，跳转之前，进行数据存储，封装syncCart函数（login.js）</p>\n\n<p>1.取出cookie中信息</p>\n\n<p>2.根据用户id在数据库中查找用户购物车信息（因为是用户如果第一次登录，数据库中不存在购物车信息，所以查找时使用findOrCreate）</p>\n\n<p>3.遍历cookiecartlist，若dbcartlist中存在同样商品，则数量相加，反之添加整个元素</p>\n\n<pre>\n  \n   &nbsp; &nbsp;cookieCartList.forEach(v =&gt; {\n   &nbsp; &nbsp; &nbsp;const exists = dbCartList.find(c =&gt; v.id === c.id)\n   &nbsp; &nbsp; &nbsp;if (exists) {\n   &nbsp; &nbsp; &nbsp; &nbsp;exists.amount += v.amount\n   &nbsp; &nbsp;  } else {\n   &nbsp; &nbsp; &nbsp; &nbsp;dbCartList.push(v)\n   &nbsp; &nbsp;  }\n   &nbsp;  })</pre>\n\n<p>&nbsp;</p>\n\n<p>购物车结算页面</p>\n\n<p>需求：在购物车结算页面展示购物车中所有商品（登录前cookie中cart_List里或者登陆后数据库里的信息）</p>\n\n<p>实现：由于中间件中已经把购物车中商品信息存入locals，所以在模板中可以直接使用</p>\n\n<p>1.在展示商品价钱时需要保留两位小数，因此编写helper(allprice)</p>\n\n<p>订单生成</p>\n\n<p>需求：点击结算，需要生成订单，并且跳转到订单信息页</p>\n\n<p>实现：</p>\n\n<p>1.先创建一个订单，因为订单编号需要一定的随机性，封装函数(getOrderNumber)</p>\n\n<p>2.根据新创建的订单id和cartList里面的商品id、购买信息，创建订单商品信息数据(创建多条数据，因此为多个异步操作，使用promise.all来统一多个异步的回调)</p>\n\n<p>3.删除数据库中购物车表中的信息</p>\n\n<p>4.将该订单的订单编号放到url地址参数中，重定向到对应的的订单信息页</p>\n\n<p>5.根据url地址中的参数查找订单id</p>\n\n<p>6.根据订单id在订单商品信息表中查询出商品id</p>\n\n<p>7.根据商品id在goods表中查询对应商品信息(promise.all)</p>\n\n<p>添加地址</p>\n\n<p>需求：点击添加地址，弹出模态框，填写信息为用户添加收货地址</p>\n\n<p>实现：采用jquery的ajax异步操作，重新渲染局部页面</p>\n\n<p>1.准备要地址部分的字符串模板(*由于js代码卸载hbs模板里面，字符串中的双花括弧需要转译，才不会被hbs模板解析)</p>\n\n<p>2.利用jquery的serializeArray获取数组-对象形式的表单参数</p>\n\n<p>3.用reduce将表单参数转换为json形式，并发送ajax请求，重新渲染页面</p>\n\n<p>4.服务端配置路由，获取参数，并将信息持久化，再查找出该用户全部地址信息并返回</p>\n\n<p>&nbsp;</p>\n\n<p>&nbsp;</p>\n\n<p>&nbsp;</p>\n', '/uploads\\avatar-1519924427869.png', '2016', '10', '21');
INSERT INTO `article` VALUES ('161', 'COOKIE', '使用javascript来获取及设置cookie', '<pre>\n// 首先在页面中引入COOKIE.js\n\n//直接调用\nCOOKIE.has(name); //检测是否有名字为name的cookie\nCOOKIE.set(key,value,expire,path,domain); //设置一个新cookie，true表示设置成功，false表示设置失败\nCOOKIE.remove(name,path,domain); //删除名为name的cookie，true表示删除成功，false表示删除失败\nCOOKIE.get(name); //获取名为name的cookie的值\nCOOKIE.clear(path,domain); //清除所有cookie\n\n//特殊命名空间方式调用\nvar myCookie=COOKIE(&#39;namespace&#39;);\nmyCookie.has(name); //检测是否有名字为name的cookie\nmyCookie.set(key,value,expire,path,domain); //设置一个新cookie，true表示设置成功，false表示设置失败\nmyCookie.remove(name,path,domain); //删除名为name的cookie，true表示删除成功，false表示删除失败\nmyCookie.get(name); //获取名为name的cookie的值\nmyCookie.clear(path,domain); //清除所有cookie\n\n//注意：remove和clear方法，如果不设置path或domain，将会删除所有根域、子域、各个深度路径下的cookie。</pre>\n', '/uploads\\avatar-1519925448559.png', '2015', '3', '2');
INSERT INTO `article` VALUES ('162', 'lazyload', 'javascript节点惰性加载执行组件', '<h2>如何使用</h2>\n\n<pre>\n// 首先在页面中引入lazyload.js\n\n/**\n * @param elem string 节点id\n *		  	   Element 节点对象\n *		  	   Array | ElementCollection 一组节点的集合引用\n *			   jQuery jquery对象，比如lazyload($(&#39;img.lazy&#39;));\n * @param cfg Object|Function {callback:function(){},container:window,range:0} 如果cfg是一个函数，则默认为回调函数\n *				如果cfg是一个object对象，则其中callback为回调函数，container为检测容器，range为检测范围容差，即目标节点距离视野中出现的距离\n */\n\nLazyLoad=function(elem, callback){}\n\n//调用\nLazyLoad(elem,function(){});\nLazyLoad($(&#39;img.lazy&#39;),function(){});\nLazyLoad([img,img1,img2[,...,imgN]],{callback:function(){},container:document.getElementById(&#39;container&#39;));\n\n//如果想用于图片lazyload\nLazyLoad(elem,function(){\n	this.src=this.getAttribute(&#39;data-original&#39;);\n});\n</pre>\n\n<h2>jQuery/Zepto适配器</h2>\n\n<pre>\n$.fn.lazyload=function(args){\n	new LazyLoad(this,args);\n	\n	return this;\n}\n\n//使用\n$(&#39;.lazy&#39;).lazyload(function(){\n	this.src=this.getAttribute(&#39;data-original&#39;);\n}));</pre>\n', '/uploads\\avatar-1519925576691.jpg', '2015', '4', '18');
